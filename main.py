from PIL import Image
import os
from enum import Enum

debug = False


class GrayscaleImageGenerator:
    # enum class of generate mode
    # 1: generate and abandon oversize data
    # 2: generate and xor oversize data
    class GenerateMode(Enum):
        ABANDON = 1
        XOR = 2

    def __init__(self, size=256, folder="malware/", mode=GenerateMode.ABANDON):
        # 初始化类，设置图像大小
        self.folder = folder
        self.size = size
        self.mode = mode
        # 创建一个新的灰度图像对象

    # loop get files refer inside of self.path
    def generate(self):
        for root, dirs, files in os.walk(self.folder):
            for file in files:
                # if extension name is exe, then generate image
                if True:
                    self.generate_from_file(file)
                    if debug:
                        print("generate image: " + file + ".png")

    def generate_from_file(self, file_name):
        # 从文件中读取二进制数据
        file_path = self.folder + file_name
        dot_index = file_name.rfind(".")
        if dot_index != -1:
            # 如果找到了句号，则去除句号及其后面的部分
            output_path = "image/malware/" + file_name[:dot_index] + ".png"
        else:
            pass
        with open(file_path, "rb") as file:
            file_data = file.read()
        image = Image.new("L", (self.size, self.size), 0)
        if self.mode == self.GenerateMode.ABANDON:
            for i in range(self.size):
                for j in range(self.size):
                    # 计算文件数据索引，循环利用数据
                    index = i * self.size + j
                    # 取出文件数据并与当前像素值进行异或运算
                    try:
                        value = file_data[index]
                    except IndexError:
                        image.save(output_path, "PNG")
                        image.close()
                        return
                    # 将运算结果放入图像的像素位置
                    image.putpixel((i, j), value)
            image.save(output_path, "PNG")
            image.close()
            return

            # 示例用法


if __name__ == "__main__":
    # 设置图片大小为 256x256 像素
    generator = GrayscaleImageGenerator(size=256, folder="sample/malware/")
    #
    # # 替换为你的输入文件路径
    # input_file_path = "test/test.exe"
    # # 替换为你的输出文件路径
    # output_file_path = "test.png"
    #
    # # 生成图像并保存
    # generator.generate_from_file(input_file_path)
    # generator.save_image(output_file_path)
    generator.generate()
