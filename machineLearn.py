import torch
import torchvision
from torchvision import *
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
import torch.nn as nn
import torch.nn.functional as F

from torchvision import transforms, datasets
if __name__ == '__main__':
    transform = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

    trainset = torchvision.datasets.ImageFolder(
        root="image/",
        transform=torchvision.transforms.ToTensor()
    )
    trainloader = DataLoader(
        trainset,

        shuffle=True
    )
    testset = torchvision.datasets.ImageFolder(
        root="test/",
        transform=torchvision.transforms.ToTensor()
    )
    testloader = DataLoader(
        testset,

        shuffle=True
    )


    classes = ('malware', 'safe')


    def imshow(img):
        img = img / 2 + 0.5  # unnormalize
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))
        plt.show()


    # get some random training images
    dataiter = iter(trainloader)
    images, labels = next(dataiter)

    test_iter = iter(testloader)
    images_test, labels_test = next(dataiter)

    # show images
    imshow(torchvision.utils.make_grid(images))
    # print labels
    print(' '.join('%5s' % classes[labels[j]] for j in range(1)))




    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            # 输入通道数由1变为3，卷积核大小由5变为3
            self.conv1 = nn.Conv2d(3, 6, 3)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 3)
            # 计算全连接层的输入大小，这里使用了输入图像的尺寸
            self.fc1 = nn.Linear(16 * 62 * 62, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            # 计算全连接层的输入大小，这里使用了输入张量的大小
            x = x.view(-1, 16 * 62 * 62)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x


    net = Net()

    import torch.optim as optim

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

    # mytransform = transforms.Compose([
    #     transforms.Grayscale(),  # 将图像转换为灰度图
    #     transforms.ToTensor()  # 将图像转换为张量
    # ])


    for epoch in range(10):  # loop over the dataset multiple times

        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs
            inputs, labels = data

            # zero the parameter gradients
            optimizer.zero_grad()
            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 2000 == 1999:  # print every 2000 mini-batches
                print('[%d, %5d] loss: %.3f' %
                      (epoch + 1, i + 1, running_loss / 2000))
                running_loss = 0.0

    print('Finished Training')

    # outputs = net(images_test)
    # _, predicted = torch.max(outputs, 1)
    # print('Predicted: ', ' '.join('%5s' % classes[predicted[j]] for j in range(1)))

    correct = 0
    total = 0
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            outputs = net(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            print("predicted: ", classes[predicted[0]])
            print("labels: ", classes[labels[0]])
            print("_:", _)
    print("total: ", total)
    print("correct: ", correct)
    print('Accuracy of the network on the 1 test images: %d %%' % (
            100 * correct / total))
